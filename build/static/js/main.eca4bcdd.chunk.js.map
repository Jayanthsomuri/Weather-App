{"version":3,"sources":["app_component/weather.component.jsx","app_component/form.component.jsx","App.js","reportWebVitals.js","index.js"],"names":["minmaxTemp","min","max","className","Weather","props","city","weatherIcon","temp_celsius","temp_min","temp_max","description","Form","error","role","onSubmit","loadweather","type","name","autoComplete","placeholder","App","getWeather","e","a","preventDefault","target","elements","value","country","fetch","api_call","json","response","console","log","setState","sys","celsius","calCelsius","main","temp","weather","get_WeatherIcon","id","state","undefined","icon","Thunderstorm","Drizzle","Rain","Snow","Atmosphere","clear","Clouds","Math","floor","icons","rangeId","this","React","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.eca4bcdd.chunk.js","sourcesContent":["import React from 'react';\r\nconst Weather=(props)=>{\r\n    return(\r\n        <div className=\"container text-white\">\r\n           <div className=\"cards pt-4\">\r\n           <h1>{props.city}</h1>\r\n           <h5 className=\"py-4\">\r\n               <i className={`wi ${props.weatherIcon} display-1`}></i>\r\n\r\n           </h5>\r\n          {props.temp_celsius?(<h1 className=\"py-2\">{props.temp_celsius}&deg;</h1>)\r\n          :null}\r\n           {/**Show max and min temp */}\r\n           {minmaxTemp(props.temp_min,props.temp_max)}\r\n        <h4 className=\"py-3\">{props.description}</h4>\r\n           </div>\r\n        </div>\r\n    );\r\n}\r\nfunction minmaxTemp(min,max){\r\n    \r\n       if(min && max){\r\n           return( <h3>\r\n            <span className='px-4'>{min}&deg;</span>\r\n            <span className='px-4'>{max}&deg;</span>\r\n        </h3>)\r\n       }\r\n    \r\n}\r\n\r\nexport default Weather;","import React from 'react';\r\nimport \"./form.style.css\";\r\nconst Form = props => {\r\n    return (\r\n        <div className=\"container\">\r\n            <div>{props.error?error():null}</div>\r\n            <form onSubmit={props.loadweather}>\r\n            <div className=\"row\">\r\n\r\n\r\n                <div className=\"col-md-3 offset-md-2 text-light\">\r\n                    <input \r\n                    type=\"text\" \r\n                    className=\"form-control\" \r\n                    name=\"city\" \r\n                    autoComplete=\"off\"\r\n                    placeholder=\"City\"/>\r\n                </div>\r\n                <div className=\"col-md-3 text-light\">\r\n                <input\r\n                 type=\"text\" \r\n                 className=\"form-control\" \r\n                 name=\"country\" \r\n                 autoComplete=\"off\"\r\n                 placeholder=\"Country\"/>\r\n                </div>\r\n\r\n                <div className=\"col-md-3 mt-md-0 py-2 text-md-left\">\r\n                    <button className=\"btn btn-warning\">Get Weather</button>\r\n\r\n                </div>\r\n\r\n\r\n            </div>\r\n            </form>\r\n        </div>\r\n    );\r\n    function error(){\r\n        return(\r\n            <div className=\"alert alert-danger mx-5\" role='alert'>\r\n                Please Enter City and Country\r\n            </div>\r\n        );\r\n    }\r\n}\r\nexport default Form;","import React from 'react';\nimport './App.css';\nimport Weather from \"./app_component/weather.component\";\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport 'weather-icons/css/weather-icons.css';\nimport Form from \"./app_component/form.component\";\n//api call  api.openweathermap.org/data/2.5/weather?q=London&appid={API key}\nconst API_key = \"6a585da6e7ba9db2d1d1792039170d40\";\n\nclass App extends React.Component{\n  constructor(){\n    super();\n    this.state={\n      city:undefined,\n      country:undefined,\n      icon:undefined,\n      main:undefined,\n      celsius:undefined,\n      temp_max:undefined,\n      temp_min:undefined,\n      description:\"\",\n      error:false\n\n\n    };\n   \n\n    this.weatherIcon={\n      Thunderstorm:\"wi-thunderstorm\",\n      Drizzle:\"wi-sleet\",\n      Rain:\"wi-strom-showers\",\n      Snow:\"wi-snow\",\n      Atmosphere:\"wi-fog\",\n      clear:\"wi-day-fog\",\n      Clouds: \"wi-day-fog\"\n    };\n  }\n  calCelsius(temp){\n    let cell=Math.floor(temp-273.15)\n    return cell;\n  }\n\n  get_WeatherIcon(icons,rangeId){\n    switch(true){\n      case rangeId>=200 && rangeId<=232:\n        this.setState({icon:this.weatherIcon.Thunderstorm});\n        break;\n        case rangeId>=300 && rangeId<=321:\n        this.setState({icon:this.weatherIcon.Drizzle});\n        break;\n        case rangeId>=500 && rangeId<=531:\n        this.setState({icon:this.weatherIcon.Rain});\n        break;\n        case rangeId>=600 && rangeId<=622:\n        this.setState({icon:this.weatherIcon.Snow});\n        break;\n        case rangeId>=701 && rangeId<=781:\n          this.setState({icon:this.weatherIcon.Atmosphere});\n          break;\n          case rangeId===800:\n          this.setState({icon:this.weatherIcon.clear});\n          break;\n          case rangeId>=801 && rangeId<=804:\n          this.setState({icon:this.weatherIcon.Clouds});\n          break;\n          default:\n            this.setState({icon:this.weatherIcon.Clouds});\n\n    }\n  }\ngetWeather= async(e)=>{\ne.preventDefault();\nconst city=e.target.elements.city.value;\nconst country=e.target.elements.country.value;\n\nif(city&&country){\n  \n  const api_call= await fetch(`http://api.openweathermap.org/data/2.5/weather?q=${city},${country}&appid=${API_key}`\n  );\nconst response = await api_call.json();\nconsole.log(response);\nthis.setState({\n  city:`${response.name},${response.sys.country}`,\n\n  country:response.sys.country,\n  celsius:this.calCelsius(response.main.temp),\n  temp_max:this.calCelsius(response.main.temp_max),\n  temp_min:this.calCelsius(response.main.temp_min),\n  description:response.weather[0].description,\n  error:false\n  \n});\nthis.get_WeatherIcon(this.weatherIcon,response.weather[0].id);\n}\nelse{\n  this.setState({error:true});\n}\n};\n  render(){\n    \n      return (\n        <div className=\"App\">\n        <Form loadweather={this.getWeather} error={this.state.error} />\n         <Weather \n         city={this.state.city}\n          country={this.state.country}\n           temp_celsius={this.state.celsius}\n         temp_max={this.state.temp_max}\n         temp_min={this.state.temp_min}\n        description={this.state.description}\n        weatherIcon={this.state.icon}/>\n        </div>\n      );\n}\n}\n\n  \n\n\n\nexport default App;\n ","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}